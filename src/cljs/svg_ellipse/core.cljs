(ns svg-ellipse.core
  (:require [reagent.core :as reagent]
            [reagent.session :as session]
            [reitit.frontend :as reitit]
            [clerk.core :as clerk]
            [accountant.core :as accountant]
            [svg-ellipse.bubble :as b]
            [svg-ellipse.geometry :as g]
            [debux.cs.core :as d :refer-macros [clog clogn dbg dbgn break]]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [
    ["/" :index]
    ["/{graphe-name}" :graphe]
    ["/page/about" :about]
    ]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; (path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    ;; (clog "home-page")
    [:span.main
     [:h1 "Welcome to svg_ellipse"]
     [:h2 [:a {:href (path-for :about)} "About"]]
     ]))

(defn graphe-page []
  (fn []
    ;; (clog "graphe-page")
    [b/svg-canvas]
    ))

(defn about-page []
  (fn [] [:span.main
          [:h1 "About Mikado Graphe Tool"]
          [:p "Not much (yet)."]]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  ;; (clog "page-for")
  ;; (clog route)
  (case route
    :index #'home-page
    :graphe #'graphe-page
    :about #'about-page
    ;; :about #'about-page
    ;; :items #'items-page
    ;; :item #'item-page
    ))


;; -------------------------
;; Page mounting component

;; (defn mouse-pos []
;;   (reagent/with-let [pointer (reagent/atom nil)
;;                      handler #(swap! pointer assoc
;;                                      :x (.-pageX %)
;;                                      :y (.-pageY %))
;;                      _ (.addEventListener js/document "mousemove" handler)]
;;     @pointer
;;     (finally
;;       (.removeEventListener js/document "mousemove" handler))))
;;       ;; (.removeEventListener svg-component "mousemove" handler))))

;; (defn tracked-pos []
;;   [:div
;;    "Pointer moved to: "
;;    (str @(reagent/track mouse-pos))])

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      ;; (clog session/state)
      ;; (clog "current-page")
      [:div
       ;;  [:header
       ;;   [:p [:a {:href (path-for :index)} "Maison"] " | "
       ;;    [:a {:href (path-for :about)} "About svg_ellipse"]]]
       ;; [tracked-pos]
       [page]
       ;; [:footer
       ;;  [:p "svg_ellipse was generated by the "
       ;;   [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]
       ])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  ;; (clog "init!")
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      ;; (js/console.trace)
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        ;; (clog ":nav-handler")
        ;; (clog path)
        ;; (clog match)
        ;; (clog current-page)
        ;; (clog route-params)
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      ;; (clog ":path-exists?")
      ;; (clog path)
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
