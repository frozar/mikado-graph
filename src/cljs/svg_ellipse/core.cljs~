(ns svg-ellipse.core
  (:require [reagent.core :as reagent]
            [reagent.session :as session]
            [reitit.frontend :as reitit]
            [clerk.core :as clerk]
            [accountant.core :as accountant]
            [svg_ellipse.geometry :as g]
            [goog.events :as events]
            )
  (
   :import [goog.events EventType]
   )
  )

(defonce points
  (reagent/atom
   {:root {:c (g/point 250 450)
           :rx 100
           :ry 50
           }
    :bubbles []
    }))

(defn gen-id []
  "Generate a string of length 8, e.g.: 'b56d74c5'"
  (apply str (repeatedly 8 #(rand-nth "0123456789abcdef"))))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to svg_ellipse"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of svg_ellipse"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of svg_ellipse"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of svg_ellipse")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About svg_ellipse"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

;; (def mouse-position (reagent.ratom/atom {:ac false :x 0 :y 0}))

;; (defn print-atom []
;;   (js/console.log (:x @mouse-position) (:y @mouse-position) (:ac @mouse-position) (:active @mouse-position))
;;   )

(defn get-bcr [svg-root]
  (-> svg-root
      reagent/dom-node
      .getBoundingClientRect))

(defn move-point [svg-root p]
  ;; (js/console.log "move-point" p)
  ;; (js/console.log "move-point" (get-in @points [:root p]))
  (fn [x y]
    ;; (js/console.log "move-point inner")
    (let [bcr (get-bcr svg-root)]
      (swap! points assoc-in p (g/point (- x (.-left bcr)) (- y (.-top bcr)))))))

(defn move-bubble [svg-root id]
  ;; (js/console.log "move-point" p)
  ;; (js/console.log "move-point" (get-in @points [:root p]))
  (fn [x y]
    ;; (js/console.log "move-point inner")
    (let [bcr (get-bcr svg-root)]
      ;(swap! points #((:bubbles %) ) assoc-in p (g/point (- x (.-left bcr)) (- y (.-top bcr)))))))
      (swap! points update :bubbles
             (fn [l] (update
                      l
                      (.indexOf (map #(:id %) l) id)
                      #(merge % {:c (g/point (- x (.-left bcr)) (- y (.-top bcr)))}))))
      )))

(def ellipse-defaults
  {
   :fill "#f06"
   :stroke "black"
   :stroke-width 2
   })

(defn drag-move-fn [on-drag]
  (fn [evt]
    ;; (js/console.log "drag-move" (.-clientX evt) (.-clientY evt))
    (on-drag (.-clientX evt) (.-clientY evt))))

(defn drag-end-fn [drag-move drag-end on-end]
  (fn [evt]
    (events/unlisten js/window EventType.MOUSEMOVE drag-move)
    (events/unlisten js/window EventType.MOUSEUP @drag-end)
    (on-end)))

(defn dragging
  ([on-drag] (dragging on-drag (fn []) (fn [])))
  ([on-drag on-start on-end]
   ;; (js/console.log "dragging")
   (let [drag-move (drag-move-fn on-drag)
         drag-end-atom (atom nil)
         drag-end (drag-end-fn drag-move drag-end-atom on-end)]
     (on-start)
     (reset! drag-end-atom drag-end)
     (events/listen js/window EventType.MOUSEMOVE drag-move)
     (events/listen js/window EventType.MOUSEUP drag-end))))

;; (defn bubble [svg-container {:keys [on-drag]} c rx ry]
;;   [:ellipse
;;    (merge ellipse-defaults
;;            {
;;             :fill "#6f0"
;;             :on-mouse-down #(dragging on-drag)
;;             ;; :on-double-click 
;;             :cx (g/x c)
;;             :cy (g/y c)
;;             :rx (+ 10 rx)
;;             :ry (+ 10 ry)
;;             })
;;    ]
;;   )

(defn bubble [cx cy]
  ;; (js/console.log "bubble")
  ;; (js/console.log svg-container)
  (swap! points update :bubbles conj {:id (gen-id) :c (g/point cx cy) :rx 100 :ry 50})
  )


(defn root-bubble [{:keys [on-drag]}]
  (js/console.log (:bubbles @points))
  (let [{:keys [c rx ry]} (:root @points)
        basic-option {
                      ;; :on-mouse-down #(dragging on-drag)
                      :on-double-click #(bubble (g/x c) (- (g/y c) 150))
                      :cx (g/x c)
                      :cy (g/y c)
                      }
        ]
    ;; (js/console.log "c" c)
    ;; [:<>
    [:g {:on-mouse-down #(dragging on-drag)}
     [:ellipse
        (merge ellipse-defaults basic-option
               {
                :fill "#f08"
                :rx (+ 10 rx)
                :ry (+ 10 ry)
                })
      ]
     [:ellipse
      (merge ellipse-defaults basic-option
             {
              :rx rx
              :ry ry
              })
      ]
     ]
    )
  )

(defn all-bubble [svg-root]
  ;; (js/console.log "on-drag" on-drag)
    [:g
     (root-bubble {:on-drag (move-point svg-root [:root :c])})
     ;; TODO: render a list of bubble here
     (for [bubble (:bubbles @points)]
       [:ellipse
        (merge ellipse-defaults ;basic-option
               {
                :key (:id bubble)
                ;; :on-mouse-down #(dragging on-drag)
                ;; {:on-drag (move-bubble svg-root (:id bubble))}
                :on-mouse-down #(dragging (move-bubble svg-root (:id bubble)))
                :fill "#f06"
                :cx (g/x (:c bubble))
                :cy (g/y (:c bubble))
                :rx (:rx bubble)
                :ry (:ry bubble)
                })])
     ])

(defn root [svg-root]
  ;; (js/console.log "root")
  ;; (js/console.log svg-root)
    ;; [all-bubble {:on-drag (move-point svg-root [:root :c])}]
    [all-bubble svg-root]
  )

(defn svg-canvas []
    [:svg {:style {:border "1px solid"
                   :background "white"
                   :width "600"
                   :height "600"}}
     [root (reagent/current-component)]
     ])

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About svg_ellipse"]]]
       [svg-canvas]
       [page]
       [:footer
        [:p "svg_ellipse was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
